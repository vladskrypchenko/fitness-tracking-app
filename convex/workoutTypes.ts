import { query, mutation } from "./_generated/server"
import { v } from "convex/values"

export const getUserWorkoutTypes = query({
  args: { 
    userId: v.id("users")
  },
  handler: async (ctx, args) => {
    const workoutTypes = await ctx.db
      .query("workoutTypes")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .collect()
    
    // –æ—Ç—Ä–∏–º—É—î–º–æ —Å–µ–∫—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    const workoutTypesWithSections = await Promise.all(
      workoutTypes.map(async (workoutType) => {
        const sections = await ctx.db
          .query("workoutSections")
          .withIndex("by_workout_type", (q) => q.eq("workoutTypeId", workoutType._id))
          .order("asc")
          .collect()
        
        return {
          ...workoutType,
          sections: sections.sort((a, b) => a.order - b.order)
        }
      })
    )
    
    return workoutTypesWithSections
  },
})

export const getAllWorkoutTypes = query({
  args: { 
    userId: v.id("users")
  },
  handler: async (ctx, args) => {
    const workoutTypes = await ctx.db
      .query("workoutTypes")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .collect()
    
    // –æ—Ç—Ä–∏–º—É—î–º–æ —Å–µ–∫—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    const workoutTypesWithSections = await Promise.all(
      workoutTypes.map(async (workoutType) => {
        const sections = await ctx.db
          .query("workoutSections")
          .withIndex("by_workout_type", (q) => q.eq("workoutTypeId", workoutType._id))
          .order("asc")
          .collect()
        
        return {
          ...workoutType,
          sections: sections.sort((a, b) => a.order - b.order)
        }
      })
    )
    
    return workoutTypesWithSections
  },
})

export const createWorkoutType = mutation({
  args: {
    userId: v.id("users"),
    name: v.string(),
    type: v.union(
      v.literal("cardio"),
      v.literal("strength"),
      v.literal("stretching")
    ),
    description: v.string(),
    duration: v.string(),
    calories: v.string(),
    emoji: v.string(),
    color: v.string(),
    bgColor: v.string(),
    lightBg: v.string(),
    lightColor: v.string(),
    borderColor: v.string(),
    gradient: v.string(),
  },
  handler: async (ctx, args) => {
    const workoutTypeId = await ctx.db.insert("workoutTypes", {
      ...args,
      isDefault: false,
    })
    
    return workoutTypeId
  },
})

export const updateWorkoutType = mutation({
  args: {
    workoutTypeId: v.id("workoutTypes"),
    name: v.optional(v.string()),
    description: v.optional(v.string()),
    duration: v.optional(v.string()),
    calories: v.optional(v.string()),
    emoji: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const { workoutTypeId, ...updates } = args
    
    await ctx.db.patch(workoutTypeId, updates)
    
    return workoutTypeId
  },
})

export const deleteWorkoutType = mutation({
  args: {
    workoutTypeId: v.id("workoutTypes"),
  },
  handler: async (ctx, args) => {
    // –≤–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å–µ–∫—Ü—ñ—ó –¥–ª—è —Ü—å–æ–≥–æ —Ç–∏–ø—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    const sections = await ctx.db
      .query("workoutSections")
      .withIndex("by_workout_type", (q) => q.eq("workoutTypeId", args.workoutTypeId))
      .collect()
    
    for (const section of sections) {
      await ctx.db.delete(section._id)
    }
    
    // –≤–∏–¥–∞–ª—è—î–º–æ —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    await ctx.db.delete(args.workoutTypeId)
    
    return args.workoutTypeId
  },
})

export const createWorkoutSection = mutation({
  args: {
    workoutTypeId: v.id("workoutTypes"),
    name: v.string(),
    duration: v.string(),
    instructions: v.array(v.string()),
    order: v.number(),
  },
  handler: async (ctx, args) => {
    const sectionId = await ctx.db.insert("workoutSections", args)
    
    return sectionId
  },
})

export const updateWorkoutSection = mutation({
  args: {
    sectionId: v.id("workoutSections"),
    name: v.optional(v.string()),
    duration: v.optional(v.string()),
    instructions: v.optional(v.array(v.string())),
    order: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const { sectionId, ...updates } = args
    
    await ctx.db.patch(sectionId, updates)
    
    return sectionId
  },
})

export const deleteWorkoutSection = mutation({
  args: {
    sectionId: v.id("workoutSections"),
  },
  handler: async (ctx, args) => {
    await ctx.db.delete(args.sectionId)
    
    return args.sectionId
  },
})

export const initializeDefaultWorkoutTypes = mutation({
  args: {
    userId: v.id("users"),
  },
  handler: async (ctx, args) => {
    // Check if user already has workout types
    const existingTypes = await ctx.db
      .query("workoutTypes")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .collect()
    
    if (existingTypes.length > 0) {
      return existingTypes.map(t => t._id)
    }
    
    // Create default workout types
    const cardioId = await ctx.db.insert("workoutTypes", {
      userId: args.userId,
      name: "–ö–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
      type: "cardio",
      description: "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –∫–∞—Ä–¥–∏–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –∏ —Å–∂–∏–≥–∞–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π",
      duration: "30-45 –º–∏–Ω—É—Ç",
      calories: "300-500 –∫–∫–∞–ª",
      emoji: "ü´Ä",
      color: "text-red-600",
      bgColor: "bg-red-500",
      lightBg: "bg-red-50",
      lightColor: "bg-red-100 text-red-700",
      borderColor: "border-red-200",
      gradient: "from-red-400 to-pink-500",
      isDefault: true,
    })
    
    const strengthId = await ctx.db.insert("workoutTypes", {
      userId: args.userId,
      name: "–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
      type: "strength",
      description: "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã –∏ —Å–∏–ª—ã",
      duration: "45-60 –º–∏–Ω—É—Ç",
      calories: "250-400 –∫–∫–∞–ª",
      emoji: "üí™",
      color: "text-blue-600",
      bgColor: "bg-blue-500",
      lightBg: "bg-blue-50",
      lightColor: "bg-blue-100 text-blue-700",
      borderColor: "border-blue-200",
      gradient: "from-blue-400 to-indigo-500",
      isDefault: true,
    })
    
    const stretchingId = await ctx.db.insert("workoutTypes", {
      userId: args.userId,
      name: "–†–∞—Å—Ç—è–∂–∫–∞ –∏ –≥–∏–±–∫–æ—Å—Ç—å",
      type: "stretching",
      description: "–ú—è–≥–∫–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≥–∏–±–∫–æ—Å—Ç–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º—ã—à—Ü",
      duration: "30-40 –º–∏–Ω—É—Ç",
      calories: "100-200 –∫–∫–∞–ª",
      emoji: "üßò",
      color: "text-emerald-600",
      bgColor: "bg-emerald-500",
      lightBg: "bg-emerald-50",
      lightColor: "bg-emerald-100 text-emerald-700",
      borderColor: "border-emerald-200",
      gradient: "from-emerald-400 to-teal-500",
      isDefault: true,
    })
    
    // Create default sections for cardio
    await ctx.db.insert("workoutSections", {
      workoutTypeId: cardioId,
      name: "–†–∞–∑–º–∏–Ω–∫–∞",
      duration: "5 –º–∏–Ω—É—Ç",
      instructions: [
        "–õ–µ–≥–∫–∏–π –±–µ–≥ –Ω–∞ –º–µ—Å—Ç–µ - 2 –º–∏–Ω—É—Ç—ã",
        "–ö—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ - 30 —Å–µ–∫—É–Ω–¥",
        "–ù–∞–∫–ª–æ–Ω—ã —Ç—É–ª–æ–≤–∏—â–∞ - 30 —Å–µ–∫—É–Ω–¥",
        "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è - 1 –º–∏–Ω—É—Ç–∞",
        "–†–∞—Å—Ç—è–∂–∫–∞ –Ω–æ–≥ - 1 –º–∏–Ω—É—Ç–∞"
      ],
      order: 1,
    })
    
    await ctx.db.insert("workoutSections", {
      workoutTypeId: cardioId,
      name: "–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å",
      duration: "25-35 –º–∏–Ω—É—Ç",
      instructions: [
        "–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π –±–µ–≥: 2 –º–∏–Ω—É—Ç—ã –±—ã—Å—Ç—Ä–æ, 1 –º–∏–Ω—É—Ç–∞ –º–µ–¥–ª–µ–Ω–Ω–æ (–ø–æ–≤—Ç–æ—Ä–∏—Ç—å 8-12 —Ä–∞–∑)",
        "–ü—Ä—ã–∂–∫–∏ —Å —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ–º —Ä—É–∫ –∏ –Ω–æ–≥ - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 30 —Å–µ–∫—É–Ω–¥",
        "–ë–µ—Ä–ø–∏ - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        "–í—ã—Å–æ–∫–∏–µ –∫–æ–ª–µ–Ω–∏ - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 30 —Å–µ–∫—É–Ω–¥",
        "–ü–ª–∞–Ω–∫–∞ —Å –ø—Ä—ã–∂–∫–∞–º–∏ - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"
      ],
      order: 2,
    })
    
    await ctx.db.insert("workoutSections", {
      workoutTypeId: cardioId,
      name: "–ó–∞–º–∏–Ω–∫–∞",
      duration: "5-10 –º–∏–Ω—É—Ç",
      instructions: [
        "–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ö–æ–¥—å–±–∞ - 3 –º–∏–Ω—É—Ç—ã",
        "–†–∞—Å—Ç—è–∂–∫–∞ –∏–∫—Ä–æ–Ω–æ–∂–Ω—ã—Ö –º—ã—à—Ü - 1 –º–∏–Ω—É—Ç–∞",
        "–†–∞—Å—Ç—è–∂–∫–∞ –ø–æ–¥–∫–æ–ª–µ–Ω–Ω—ã—Ö —Å—É—Ö–æ–∂–∏–ª–∏–π - 1 –º–∏–Ω—É—Ç–∞",
        "–ì–ª—É–±–æ–∫–∏–µ –≤–¥–æ—Ö–∏ –∏ –≤—ã–¥–æ—Ö–∏ - 2 –º–∏–Ω—É—Ç—ã"
      ],
      order: 3,
    })
    
    // Create default sections for strength
    await ctx.db.insert("workoutSections", {
      workoutTypeId: strengthId,
      name: "–†–∞–∑–º–∏–Ω–∫–∞",
      duration: "8-10 –º–∏–Ω—É—Ç",
      instructions: [
        "–õ–µ–≥–∫–æ–µ –∫–∞—Ä–¥–∏–æ - 5 –º–∏–Ω—É—Ç (—Ö–æ–¥—å–±–∞, –≤–µ–ª–æ—Å–∏–ø–µ–¥)",
        "–í—Ä–∞—â–µ–Ω–∏—è —Å—É—Å—Ç–∞–≤–∞–º–∏ - 2 –º–∏–Ω—É—Ç—ã",
        "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ - 3 –º–∏–Ω—É—Ç—ã"
      ],
      order: 1,
    })
    
    await ctx.db.insert("workoutSections", {
      workoutTypeId: strengthId,
      name: "–í–µ—Ä—Ö —Ç–µ–ª–∞",
      duration: "15-20 –º–∏–Ω—É—Ç",
      instructions: [
        "–û—Ç–∂–∏–º–∞–Ω–∏—è - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12-15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –∏–ª–∏ —Ç—è–≥–∞ –≤ –Ω–∞–∫–ª–æ–Ω–µ - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8-12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ª–µ–∂–∞ - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10-12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –≥–∞–Ω—Ç–µ–ª–µ–π - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12-15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        "–ü–æ–¥—ä–µ–º—ã –Ω–∞ –±–∏—Ü–µ–ø—Å - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12-15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        "–¢—Ä–∏—Ü–µ–ø—Å –Ω–∞ –±—Ä—É—Å—å—è—Ö - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10-12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"
      ],
      order: 2,
    })
    
    await ctx.db.insert("workoutSections", {
      workoutTypeId: strengthId,
      name: "–ù–∏–∑ —Ç–µ–ª–∞",
      duration: "15-20 –º–∏–Ω—É—Ç",
      instructions: [
        "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15-20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        "–í—ã–ø–∞–¥—ã - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É",
        "–†—É–º—ã–Ω—Å–∫–∞—è —Ç—è–≥–∞ - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12-15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        "–ü–æ–¥—ä–µ–º—ã –Ω–∞ –Ω–æ—Å–∫–∏ - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É"
      ],
      order: 3,
    })
    
    await ctx.db.insert("workoutSections", {
      workoutTypeId: strengthId,
      name: "–ó–∞–º–∏–Ω–∫–∞",
      duration: "5-10 –º–∏–Ω—É—Ç",
      instructions: [
        "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –º—ã—à—Ü - 8 –º–∏–Ω—É—Ç",
        "–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è - 2 –º–∏–Ω—É—Ç—ã"
      ],
      order: 4,
    })
    
    // Create default sections for stretching
    await ctx.db.insert("workoutSections", {
      workoutTypeId: stretchingId,
      name: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
      duration: "5 –º–∏–Ω—É—Ç",
      instructions: [
        "–ì–ª—É–±–æ–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ –≤ –ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Å–∏–¥—è - 2 –º–∏–Ω—É—Ç—ã",
        "–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã –≥–æ–ª–æ–≤—ã - 1 –º–∏–Ω—É—Ç–∞",
        "–ö—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–ª–µ—á–∞–º–∏ - 1 –º–∏–Ω—É—Ç–∞",
        "–õ–µ–≥–∫–∏–µ –Ω–∞–∫–ª–æ–Ω—ã —Ç—É–ª–æ–≤–∏—â–∞ - 1 –º–∏–Ω—É—Ç–∞"
      ],
      order: 1,
    })
    
    await ctx.db.insert("workoutSections", {
      workoutTypeId: stretchingId,
      name: "–†–∞—Å—Ç—è–∂–∫–∞ –≤–µ—Ä—Ö–∞ —Ç–µ–ª–∞",
      duration: "12-15 –º–∏–Ω—É—Ç",
      instructions: [
        "–†–∞—Å—Ç—è–∂–∫–∞ —à–µ–∏ –∏ –ø–ª–µ—á - 3 –º–∏–Ω—É—Ç—ã",
        "–†–∞—Å—Ç—è–∂–∫–∞ —Ä—É–∫ –∏ –∑–∞–ø—è—Å—Ç–∏–π - 3 –º–∏–Ω—É—Ç—ã",
        "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞ - 4 –º–∏–Ω—É—Ç—ã",
        "–†–∞—Å—Ç—è–∂–∫–∞ –≥—Ä—É–¥–Ω—ã—Ö –º—ã—à—Ü - 3 –º–∏–Ω—É—Ç—ã",
        "–ë–æ–∫–æ–≤—ã–µ –Ω–∞–∫–ª–æ–Ω—ã - 2 –º–∏–Ω—É—Ç—ã"
      ],
      order: 2,
    })
    
    await ctx.db.insert("workoutSections", {
      workoutTypeId: stretchingId,
      name: "–†–∞—Å—Ç—è–∂–∫–∞ –Ω–∏–∑–∞ —Ç–µ–ª–∞",
      duration: "12-15 –º–∏–Ω—É—Ç",
      instructions: [
        "–†–∞—Å—Ç—è–∂–∫–∞ –±–µ–¥–µ—Ä –∏ —è–≥–æ–¥–∏—Ü - 4 –º–∏–Ω—É—Ç—ã",
        "–†–∞—Å—Ç—è–∂–∫–∞ –ø–æ–¥–∫–æ–ª–µ–Ω–Ω—ã—Ö —Å—É—Ö–æ–∂–∏–ª–∏–π - 3 –º–∏–Ω—É—Ç—ã",
        "–†–∞—Å—Ç—è–∂–∫–∞ –∏–∫—Ä–æ–Ω–æ–∂–Ω—ã—Ö –º—ã—à—Ü - 3 –º–∏–Ω—É—Ç—ã",
        "–†–∞—Å—Ç—è–∂–∫–∞ –∫–≤–∞–¥—Ä–∏—Ü–µ–ø—Å–æ–≤ - 3 –º–∏–Ω—É—Ç—ã",
        "–ü–æ–∑–∞ —Ä–µ–±–µ–Ω–∫–∞ - 2 –º–∏–Ω—É—Ç—ã"
      ],
      order: 3,
    })
    
    await ctx.db.insert("workoutSections", {
      workoutTypeId: stretchingId,
      name: "–†–µ–ª–∞–∫—Å–∞—Ü–∏—è",
      duration: "5-8 –º–∏–Ω—É—Ç",
      instructions: [
        "–ü–æ–∑–∞ —Ç—Ä—É–ø–∞ (—à–∞–≤–∞—Å–∞–Ω–∞) - 5 –º–∏–Ω—É—Ç",
        "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏ –≥–ª—É–±–æ–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ - 3 –º–∏–Ω—É—Ç—ã"
      ],
      order: 4,
    })
    
    return [cardioId, strengthId, stretchingId]
  },
}) 